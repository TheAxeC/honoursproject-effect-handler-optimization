effect Consume : unit -> string;;
effect Fail : unit -> empty;;

let hdlr = handler
    | val y -> (fun _ -> y)
    | #Consume () k ->
        fun s ->
        (match s with
            | [] -> absurd (#Fail ())
            | (x :: xs) -> k x xs);;

let res = (with hdlr handle (
let c = #Consume () in
let d = #Consume () in
    match (c) with
        | "a" -> d
        | _ -> ""


)) ["a"; "b"] 
