effect Consume : unit -> string;;
effect Fail : unit -> empty;;
effect Decide : unit -> bool;;



let consumeHandler = handler
    | val y -> (fun _ -> y)
    | #Consume () k ->
        fun s ->
        (match s with
            | [] -> absurd (#Fail ())
            | (x :: xs) -> k x xs)

;;



let backtrack = handler
| #Decide () k ->
    handle k true with
    | #Fail () _ -> k false

;;


let abword =
	(	with consumeHandler handle
	 	(
	 		let a = #Consume () in
	 		let b = #Consume () in
	 		begin match a with
	 		| "a" -> begin match b with
	 				 | "b" -> true
	 				 |  _ -> false
	 				end
	 		| _ -> false
	 		end
		)
    )["a"; "b"]
;;

let res = (with consumeHandler handle (
let c = #Consume () in
let d = #Consume () in
    match (c) with
        | "a" -> d
        | _ -> ""


)) ["a"; "b"]
;;
