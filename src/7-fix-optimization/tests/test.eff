"----------------------------------------------------------------";;
"Declarations of the effect and handler";;

effect EffectExample : unit -> int

effect EffectExampleOther : unit -> int

let handlerExample = handler
	| #EffectExample () k ->
		handle (k 1) with
			| #EffectExampleOther () k2 -> k2 1
	| val x -> x + 3
;;

let handlerExampleSimple = handler
    | #EffectExample () k -> k 1
    | val x -> x + 3

let handlerExampleSimple2 = handler
    | #EffectExampleOther () k -> k 1234
    | val x -> x + 3
;;

let functionExample () = 1 + #EffectExample () + #EffectExampleOther ()
;;

let functionSimple () = 1 + #EffectExampleOther ()
;;
let functionSimple2 () = 1 + #EffectExample ()
;;

(* Remove handlerExampleSimple *)
with handlerExampleSimple handle ( with handlerExampleSimple2 handle (functionSimple () + 2));;

(*
    functionSimple2 is pure in terms of handlerExampleSimple2
    handlerExampleSimple2 does not handle any effects from functionSimple2
*)
with handlerExampleSimple2 handle (functionSimple2 () + 2);;

(* Not pure *)
with handlerExample handle (functionExample () + 2);;

(* pure *)
with handlerExample handle (functionSimple () + 2);;

(* Not pure *)
with handlerExample handle (functionSimple2 () + 2)
