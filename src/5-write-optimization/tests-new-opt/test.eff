"----------------------------------------------------------------";;
"Declarations of the effect and handler";;

effect EffectExample : unit -> int

effect EffectExampleOther : unit -> int

let handlerExample = handler
	| #EffectExample () k -> (k 3) + 4
	| val x -> x + 3

let handlerSplitLeft = handler
	| #EffectExample () k -> (k 3) + 4

let handlerSplitRight = handler
	| #EffectExample () k -> (k 3) + 4
	| val x -> x + 3
;;

(*********************************)
"Declarations of the helper functions";;

let functionExample () = 1 + #EffectExample ()

;;

(*********************************)
"Example with one handler";;

with handlerExample handle (functionExample () + 2)

;;

(*********************************)
"Example with two handler";;

(with handlerSplitLeft handle (functionExample ())) + (with handlerSplitRight handle (2))

;;
(*********************************)
"Example with one handler";;

with handlerExample handle (2 + functionExample ())

;;

(*********************************)
"Example with two handler";;

(with handlerSplitLeft handle (2)) + (with handlerSplitRight handle (functionExample ()))
