"----------------------------------------------------------------";;
"Declarations of the effect and handler";;

effect EffectExample : unit -> int

let handlerExample = handler
	| #EffectExample () k -> k 1
	| val x -> x + 4
;;

let handlerExample2 = handler
	| #EffectExample () k -> k 1
;;


let f x = x + 2

let f2 () = 1

;;

(*********************************)

"----------------------------------------------------------------";;
"Show a nonoptimized example";;

(*
NON-optimized example:
    Function call with an addition
*)

with handlerExample handle
    f (#EffectExample ()) + 3

;;

(*********************************)

"----------------------------------------------------------------";;
"Show a optimized example";;

(*
Optimized example:
    Just a function call is optimized
*)

with handlerExample handle (f (#EffectExample ()))

;;

(*********************************)

"----------------------------------------------------------------";;
"Show a example where I manually split the handler around both parts";;

(*
Try to split the handler
*)

(with handlerExample handle (f (#EffectExample ()) )) + (with handlerExample2 handle (3))

;;
(*********************************)

"----------------------------------------------------------------";;
"Show a example where for optimization";;

with handlerExample handle (f2 () + 2)

;;
