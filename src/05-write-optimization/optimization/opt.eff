"----------------------------------------------------------------";;
"Declarations of the effect and handler";;

effect EffectExample : unit -> int

effect EffectExampleOther : unit -> int

let handlerExample = handler
	| #EffectExample () k -> k 4
	| val x -> x + 3
;;

(*********************************)
"Declarations of the helper functions";;

let functionWithoutEffect () = 1

let functionWithEffect () = 1 + #EffectExample ()

let functionWithOtherEffect () = 1 + #EffectExampleOther ()

;;

(*********************************)
"Example which will be optimized";;
"Handle a computation in which we compute (1 + 2) + 3";;

with handlerExample handle (functionWithoutEffect () + 2)

;;

(*********************************)
"Example which will be optimized";;
"Handle a computation in which we compute ((1 + #EffectExampleOther + 2) + 3)";;

with handlerExample handle (functionWithOtherEffect () + 2)

;;

(*********************************)
"Example which which will not be optimized";;
"Handle a computation in which we compute ((1 + 4 + 2) + 3)";;

with handlerExample handle (functionWithEffect () + 2)

;;

(*********************************)
"Example which which will should be partially optimized";;
"Handle a computation in which we compute ((1 + 1 + 4) + 3)";;

with handlerExample handle (functionWithoutEffect () + functionWithEffect ())

;;
