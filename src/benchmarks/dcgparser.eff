(***********************************
*********** The Parser *************
***********************************)

(********************************
* Effects
********************************)

effect Consume : unit -> string;;
effect Fail : unit -> empty;;
effect AddChar : string -> unit;;

(********************************
* Handlers
********************************)

let consumeHandler = handler
    | val y -> (fun _ -> y)
    | #Consume () k ->
        fun s ->
        (match s with
            | [] -> k "" [] (* absurd (#Fail ()) *)
            | (x :: xs) -> k x xs)
    | #AddChar x k ->
        (fun s -> k () (x :: s))
;;

(********************************
* Parser
********************************)

let createNumber prev num = prev * 10 + num;;

let rec parse prev =
    let curChar = #Consume () in
    begin match curChar with
    | "0" -> parse (createNumber prev 0)
    | "1" -> parse (createNumber prev 1)
    | "2" -> parse (createNumber prev 2)
    | "3" -> parse (createNumber prev 3)
    | "4" -> parse (createNumber prev 4)
    | "5" -> parse (createNumber prev 5)
    | "6" -> parse (createNumber prev 6)
    | "7" -> parse (createNumber prev 7)
    | "8" -> parse (createNumber prev 8)
    | "9" -> parse (createNumber prev 9)
    | "+" -> prev + (parse 0)
    | "-" -> prev - (parse 0)
    | "*" -> prev * (parse 0)
    | "/" -> prev / (parse 0)
    | " " -> parse prev
    | "EOF" -> prev
    | _ -> absurd (#Fail ())
    end
;;
let rec parseNum prev =
    let curChar = #Consume () in
    begin match curChar with
    | "0" -> parseNum (createNumber prev 0)
    | "1" -> parseNum (createNumber prev 1)
    | "2" -> parseNum (createNumber prev 2)
    | "3" -> parseNum (createNumber prev 3)
    | "4" -> parseNum (createNumber prev 4)
    | "5" -> parseNum (createNumber prev 5)
    | "6" -> parseNum (createNumber prev 6)
    | "7" -> parseNum (createNumber prev 7)
    | "8" -> parseNum (createNumber prev 8)
    | "9" -> parseNum (createNumber prev 9)
    | _ -> prev
    end
;;

let parseFactor = fun () -> parseNum 0

;;

(* let rec parseTerm =
    let leftExp = parseTerm in
    let op = #Consume () in
    let rightExp = parseFactor in
    begin match op with
    | "*" -> leftExp * rightExp
    | "/" -> leftExp / rightExp
    | _ -> absurd (#Fail ())
    end
;;

let rec parseExpression =
    let leftExp = parseExpression in
    let op = #Consume () in
    let rightExp = parseTerm in
    begin match op with
    | "+" -> leftExp + rightExp
    | "-" -> leftExp - rightExp
    | _ -> absurd (#Fail ())
    end
;; *)

(*
<expression> ::= <expression> + <term>
          |  <expression> - <term>
          |  <term>

  <term> ::= <term> * <factor>
          |  <term> / <factor>
          |  <factor>

<factor> ::= num
          |  ( <expression> ) *)

(* let abword =
	(with consumeHandler handle
	 	(
	 		let a = #Consume () in
	 		let b = #Consume () in
	 		begin match a with
	 		| "a" -> begin match b with
	 				 | "b" -> true
	 				 |  _ -> false
	 				end
	 		| _ -> false
	 		end
		)
    )["a"; "b"]
;; *)

(********************************
* Example
********************************)

let test1 = (with consumeHandler handle (
    parseFactor ()
)) ["1"; "0"; "2"];;

(* let test1 = (with consumeHandler handle (
    parseFactor
)) ["1"; "0"; "+"; "2"; "*"; "2"; "+"; "2"];; *)

(* let res = (with consumeHandler handle (
let c = #Consume () in
let d = #Consume () in
    match (c) with
        | "a" -> d
        | _ -> ""


)) ["a"; "b"]
;; *)
