let no_attack (x, y) (x', y') =
  x <> x' && y <> y' && abs (x - x') <> abs (y - y')

let available number_of_queens x qs =
  let rec loop possible y =
    if y < 1 then
      possible
    else if forall (no_attack (x, y)) qs then
      loop (y :: possible) (y - 1)
    else
      loop possible (y - 1)
  in
  loop [] number_of_queens

(******************************************************************************)

effect Decide : unit -> bool
effect Fail : unit -> empty

let rec choose = function
  | [] -> (match (#Fail ()) with)
  | x::xs -> if #Decide () then x else choose xs

let backtrack = handler
  | #Decide _ k ->
      handle k true with
      | #Fail _ _ -> k false

let choose_all = handler
  | val x -> [x]
  | #Decide _ k -> k true @ k false
  | #Fail _ _ -> []

(******************************************************************************)

let queens number_of_queens =
  let rec place x qs =
    if x > number_of_queens then qs else
      let y = choose (available number_of_queens x qs) in
      place (x + 1) ((x, y) :: qs)
  in
  place 1 []

let queens_one number_of_queens =
  with backtrack handle queens number_of_queens

let queens_all number_of_queens =
  with choose_all handle queens number_of_queens
